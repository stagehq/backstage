type Api implements Node {
  apiConnector: ApiConnector
  apiResponses: [ApiResponse!]
  createdAt: String
  extension: Extension
  id: ID!
  modifiedAt: String
  oAuth: OAuth
  preferences: [Preference!]
}

type ApiConnector implements Node {
  authType: String
  createdAt: String
  id: ID!
  markdown: String
  modifiedAt: String
  name: String
}

type ApiConnectorRoute implements Node {
  apiConnector: ApiConnector
  createdAt: String
  id: ID!
  modifiedAt: String
  name: String
  url: String
  urlParameter: [String!]
}

type ApiResponse implements Node {
  api: Api
  apiConnectorRoute: ApiConnectorRoute
  createdAt: String
  id: ID!
  modifiedAt: String
  response: JSON
}

type Extension implements Node {
  createdAt: String
  id: ID!
  modifiedAt: String
  site: Site
  sortOrder: Int
  storeExtension: StoreExtension
  title: String
  underlayingApis: [Api!]
}

scalar JSON

type Mutation {
  createOAuthforApi(accessToken: String, apiConnectorName: String, expiresIn: Int, idToken: String, refreshToken: String, scope: String): OAuth
  deleteExtension(id: String!, siteId: String!): Extension
  updateExtensionTitle(id: String!, title: String!): Extension
  updateSiteHeader(bio: String!, subdomain: String!, tagline: String!): Site
  updateSiteLayouts(id: String!, layouts: String!): Site
  updateUser(alias: String, coverImageUrl: String, firstName: String, image: String, lastName: String): User
  upsertApiResponse(apiConnectorRouteId: String, apiId: String, response: String): ApiResponse
  upsertSite(bio: String!, layouts: String, subdomain: String!, tagline: String!): Site
}

interface Node {
  id: ID!
}

type OAuth implements Node {
  accessToken: String
  apiConnector: ApiConnector
  apis: [Api!]
  createdAt: String
  expiresIn: Int
  id: ID!
  idToken: String
  isExpired: Boolean
  modifiedAt: String
  refreshToken: String
  scope: String
  user: User
}

type Preference implements Node {
  apis: [Api!]
  id: ID!
  key: String
  user: User
  value: String
}

type Query {
  currentUser: User
  getAllSites: [Site!]
  getApi(apiConnectorName: String): Api
  getOAuth(apiConnectorName: String!): OAuth
  getSite(subdomain: String!): Site
  getStoreExtensions: [StoreExtension!]
  getValidAlias(alias: String): User
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
}

type Site implements Node {
  bio: String
  createdAt: String
  extensions: [Extension!]
  id: ID!
  layouts: JSON
  modifiedAt: String
  subdomain: String
  tagline: String
}

type StoreExtension implements Node {
  blockId: String
  createdAt: String
  description: String
  icon: String
  id: ID!
  image: String
  integratedExtensions: [Extension!]
  markdown: String
  modifiedAt: String
  name: String
  routes: [ApiConnectorRoute!]
}

type User implements Node {
  alias: String
  coverImageUrl: String
  email: String
  firstName: String
  fullName: String
  id: ID!
  image: String
  lastName: String
  mainSite: Site
  name: String
  sites: [Site!]
}