generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "../graphql/pothos-types.generated.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  modifiedAt           DateTime              @default(now())
  email                String                @unique
  emailVerified        DateTime?
  image                String?
  coverImageUrl        String?
  accounts             Account[]
  sessions             Session[]
  userProjectRelations UserProjectRelation[] @relation("userToProject")
  notification         Notification?
  payment              Payment?
  alias                String?               @unique
  name                 String?
  firstName            String?
  lastName             String?
  bio                  String?
  url                  String?

  lastProject   Project? @relation("lastProject", fields: [lastProjectId], references: [id])
  lastProjectId String?

  participantInIdea    Idea[]          @relation("participantInIdea")
  createdIdeas         Idea[]
  createdComment       Comment[]
  createdThreadComment ThreadComment[]
  votedIdeas           Idea[]          @relation("votedInIdea")

  reactions Reaction[] @relation("reactionCreator")
}

model Project {
  id           String                @id @default(cuid())
  createdAt    DateTime              @default(now())
  modifiedAt   DateTime              @default(now())
  contributors UserProjectRelation[] @relation("projectToUser")
  name         String
  slug         String                @unique
  ideas        Idea[]
  active       Boolean               @default(true)

  labels Label[]

  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  User User[] @relation("lastProject")
}

model Idea {
  id          String   @id @default(cuid())
  number      Int      @unique @default(autoincrement())
  createdAt   DateTime @default(now())
  modifiedAt  DateTime @default(now())
  title       String
  description String?  @default("")

  votes     User[]     @relation("votedInIdea")
  reactions Reaction[]

  statusMeeting Boolean? @default(false)
  creator       User     @relation(fields: [userId], references: [id])
  participants  User[]   @relation("participantInIdea")
  labels        Label[]

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  userId    String

  comments Comment[]
}

model Comment {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now())

  parentType ParentType @default(idea)
  idea       Idea?      @relation(fields: [ideaId], references: [id])
  ideaId     String?

  creator User   @relation(fields: [userId], references: [id])
  userId  String

  reactions     Reaction[]
  threadComment ThreadComment[]

  content String? @default("")
}

model ThreadComment {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now())

  parentComment Comment @relation(fields: [commentId], references: [id])
  commentId     String

  creator User   @relation(fields: [userId], references: [id])
  userId  String

  reactions Reaction[]

  content String? @default("")
}

model Reaction {
  id      String @id @default(cuid())
  content String

  idea   Idea?   @relation(fields: [ideaId], references: [id])
  ideaId String?

  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  threadComment   ThreadComment? @relation(fields: [threadCommentId], references: [id])
  threadCommentId String?

  reactionGroup User[] @relation("reactionCreator")

  parentType ParentType @default(idea)
}

model Label {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  modifiedAt  DateTime @default(now())
  name        String
  description String
  color       String
  ideas       Idea[]

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model UserProjectRelation {
  id         String      @id @default(cuid())
  createdAt  DateTime    @default(now())
  modifiedAt DateTime    @default(now())
  userMail   String
  user       User        @relation("userToProject", fields: [userMail], references: [email])
  projectId  String
  project    Project     @relation("projectToUser", fields: [projectId], references: [id])
  role       ProjectRole @default(contributor)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  created_at               Int?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id         String           @id @default(cuid())
  userMail   String?          @unique
  idea       Boolean          @default(true)
  initiative Boolean          @default(true)
  meeting    Boolean          @default(true)
  chat       Boolean          @default(false)
  push       PushNotification @default(same_as_notification)
  user       User?            @relation(fields: [userMail], references: [email])
}

enum ProjectRole {
  owner
  contributor
  core
}

enum PushNotification {
  never
  same_as_notification
  always
}

model Payment {
  id                   String      @id @default(cuid())
  userMail             String?     @unique
  firstName            String
  lastName             String
  email                String
  country              String
  zip                  Int
  annualBillingEnabled Boolean
  plan                 PaymentPlan @default(starter)
  user                 User?       @relation(fields: [userMail], references: [email])
}

enum PaymentPlan {
  starter
  extended
  pro
}

enum ParentType {
  idea
  comment
  initiative
  threadComment
}
