generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "../graphql/pothos-types.generated.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  createdAt            DateTime              @default(now())
  modifiedAt           DateTime              @default(now())
  email                String                @unique
  emailVerified        DateTime?
  image                String?
  coverImageUrl        String?
  alias                String?               @unique
  name                 String?
  firstName            String?
  lastName             String?

  accounts             Account[]
  sessions             Session[]
  sites                Site[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  created_at               Int?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Site {
  id                    String                @id @default(cuid())
  createdAt             DateTime              @default(now())
  modifiedAt            DateTime              @default(now())
  isMain                Boolean               @default(false)
  subdomain             String                @unique

  userId                String                
  user                  User                  @relation(fields: [userId], references: [id])

  extensions            Extension[]
}

model Extension {
  id                    String                @id @default(cuid())
  createdAt             DateTime              @default(now())
  modifiedAt            DateTime              @default(now())

  siteId                String
  site                  Site                  @relation(fields: [siteId], references: [id])

  storeExtensionId      String
  storeExtension        StoreExtension        @relation(fields: [storeExtensionId], references: [id])

  apiId      String
  underlayingApi        Api                   @relation(fields: [apiId], references: [id])
}

model Api {
  id                    String                @id @default(cuid())
  createdAt             DateTime              @default(now())
  modifiedAt            DateTime              @default(now())
  refreshToken          String
  accessToken           String

  apiConnectorId        String
  apiConnector          ApiConnector          @relation(fields: [apiConnectorId], references: [id])

  apiResponses          ApiResponses[]

  extensions            Extension[]
}

model ApiResponses {
  id                    String                @id @default(cuid())
  createdAt             DateTime              @default(now())
  modifiedAt            DateTime              @default(now())
  response              String

  apiId                 String
  api                   Api                   @relation(fields: [apiId], references: [id])

  apiConnectorRouteId   String
  apiConnectorRoute     ApiConnectorRoute     @relation(fields: [apiConnectorRouteId], references: [id])
}




// Generated API Connector ----------------------------------------------------------
model ApiConnector {
  id                    String                @id @default(cuid())
  createdAt             DateTime              @default(now())
  modifiedAt            DateTime              @default(now())
  name                  String                @unique
  markdown              String?

  integratedApis        Api[]
  apiConnectorRoute     ApiConnectorRoute[]
}

model ApiConnectorRoute {
  id                    String                @id @default(cuid())
  createdAt             DateTime              @default(now())
  modifiedAt            DateTime              @default(now())
  name                  String                            
  url                   String

  apiConnectorId        String
  apiConnector          ApiConnector          @relation(fields: [apiConnectorId], references: [id])

  apiResponses          ApiResponses[]

  storeExtensions       StoreExtension[]
}

// Generated Extension Store ---------------------------------------------------------
model StoreExtension {
  id                    String                @id @default(cuid())
  createdAt             DateTime              @default(now())
  modifiedAt            DateTime              @default(now())
  name                  String                @unique
  markdown              String?

  integratedExtensions  Extension[]
  routes                ApiConnectorRoute[]
}

